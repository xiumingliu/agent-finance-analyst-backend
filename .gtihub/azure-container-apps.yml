name: CI/CD â€“ FastAPI to Azure Container Apps

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  APP_NAME: fastapi-template
  RESOURCE_GROUP: rg-fastapi-template
  LOCATION: westeurope
  ACA_ENV: aca-env-fastapi-template
  IMAGE_NAME: ghcr.io/${{ github.repository }}/backend
  CONTAINER_PORT: 8000

jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write   # for azure/login OIDC
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh && echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Sync deps
        run: uv sync --frozen

      - name: Lint
        run: uv run ruff check .

      - name: Tests
        run: uv run pytest

      - name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME || github.actor }}
          password: ${{ secrets.GHCR_TOKEN || github.token }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }},${{ env.IMAGE_NAME }}:latest

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Container Apps
        uses: azure/cli@v2
        with:
          inlineScript: |
            az extension add -n containerapp --yes
            # Create RG & ACA env if missing
            az group create -n $RESOURCE_GROUP -l $LOCATION
            az containerapp env show -n $ACA_ENV -g $RESOURCE_GROUP || \
              az containerapp env create -n $ACA_ENV -g $RESOURCE_GROUP -l $LOCATION

            # Create or update the app
            az containerapp up \
              --name $APP_NAME \
              --resource-group $RESOURCE_GROUP \
              --environment $ACA_ENV \
              --image $IMAGE_NAME:latest \
              --target-port $CONTAINER_PORT \
              --ingress external \
              --min-replicas 0 \
              --max-replicas 3 \
              --cpu 0.5 --memory 1Gi \
              --env-vars \
                APP_NAME="FastAPI Template" \
                ENV="prod" \
                LOG_LEVEL="INFO"

            # Optional: split traffic between latest and previous revisions, autoscaling by HTTP, etc.
